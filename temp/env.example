# Bella's Reef - Temperature Service Environment Configuration
# Copy this file to .env and update with your actual values
# This file must be located at /temp/.env (NOT project root)

# =============================================================================
# DEPLOYMENT CHECKLIST & GUIDANCE
# =============================================================================
# 
# BEFORE STARTING THE SERVICE:
# 1. ✅ Copy this file to .env: cp env.example .env
# 2. ✅ Set TEMP_ENABLED=true to enable the service
# 3. ✅ Set a secure SERVICE_TOKEN (generate with: openssl rand -hex 32)
# 4. ✅ Configure DATABASE_URL with your PostgreSQL credentials
# 5. ✅ Ensure PostgreSQL is running and accessible
# 6. ✅ Run database initialization: python ../scripts/init_db.py
# 7. ✅ Verify 1-wire subsystem is available (optional, for hardware testing)
# 8. ✅ Test service startup: ./../scripts/start_temp.sh
#
# HARDWARE REQUIREMENTS:
# - Raspberry Pi with 1-wire temperature sensors (DS18B20)
# - 1-wire bus enabled in /boot/config.txt
# - Temperature sensors connected to GPIO 4 (default)
#
# TROUBLESHOOTING:
# - If you see "1-wire subsystem not available", check /boot/config.txt
# - If database connection fails, verify DATABASE_URL and PostgreSQL status
# - If service token errors occur, check SERVICE_TOKEN format and length
# - For hardware issues, use /probe/check endpoint to diagnose 1-wire status
# - If service is disabled, check TEMP_ENABLED setting in .env

# =============================================================================
# SERVICE ENABLEMENT (CRITICAL)
# =============================================================================

# Enable/disable the temperature service
# Set to false to completely disable the service (setup/start scripts will exit)
TEMP_ENABLED=true

# =============================================================================
# SECURITY (CRITICAL - CHANGE IN PRODUCTION)
# =============================================================================

# Service Authentication Token
# To generate your own: openssl rand -hex 32
# This token is used for inter-service authentication
SERVICE_TOKEN=a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456

# =============================================================================
# DATABASE CONFIGURATION (REQUIRED)
# =============================================================================

# PostgreSQL connection string
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/bellasreef

# =============================================================================
# SERVICE CONFIGURATION
# =============================================================================

# Service port (default: 8004)
SERVICE_PORT=8004

# Service host (default: 0.0.0.0 for all interfaces)
SERVICE_HOST=0.0.0.0

# Debug mode (default: false for production)
DEBUG=false

# Log level (default: INFO)
LOG_LEVEL=INFO

# =============================================================================
# HARDWARE CONFIGURATION (OPTIONAL)
# =============================================================================

# 1-wire bus GPIO pin (default: 4)
# Change this if you're using a different GPIO pin for 1-wire
W1_GPIO_PIN=4

# 1-wire device directory (default: /sys/bus/w1/devices)
# Usually doesn't need to be changed
W1_DEVICE_DIR=/sys/bus/w1/devices

# =============================================================================
# API CONFIGURATION
# =============================================================================

# CORS allowed origins (default: all origins for development)
# For production, specify exact origins: ["https://myreefapp.com"]
ALLOWED_HOSTS=*

# =============================================================================
# DEPLOYMENT NOTES
# =============================================================================
# 
# This service provides temperature probe management and discovery.
# It does NOT handle polling or data collection - that's handled by the poller service.
#
# Key endpoints:
# - GET /probe/health - Health check (no auth required)
# - GET /probe/discover - Discover available temperature sensors (auth required)
# - GET /probe/list - List configured probes (auth required)
# - GET /probe/{id}/current - Get current temperature reading (auth required)
# - GET /probe/{id}/history - Get historical data (placeholder, auth required)
# - GET /probe/check - Check 1-wire subsystem status (auth required)
#
# Authentication:
# - All endpoints (except /probe/health) require Bearer token
# - Token format: Authorization: Bearer <SERVICE_TOKEN>
#
# Database:
# - Requires 'probes' table to be created
# - Run 'python ../scripts/init_db.py' to initialize
#
# Hardware:
# - 1-wire subsystem must be enabled in /boot/config.txt
# - Add: dtoverlay=w1-gpio,gpiopin=4
# - Reboot required after enabling 1-wire
#
# Service Control:
# - Set TEMP_ENABLED=false to completely disable the service
# - Setup and start scripts will exit immediately if disabled 