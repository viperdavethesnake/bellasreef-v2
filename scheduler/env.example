# =============================================================================
# Bella's Reef - Environment Configuration
# =============================================================================
# Copy this file to .env and update values for your environment
# cp env.example .env
#
# SECURITY NOTE: This file contains sensitive configuration.
# - Never commit .env to version control
# - Use strong, unique passwords in production
# - Review all settings before deployment
#
# SYSTEM REQUIREMENTS:
# - Python 3.11+ (included in Raspberry Pi OS Bookworm)
# - Raspberry Pi OS Bookworm (Debian 12) or newer
# - Kernel 5.15+ (required for lgpio library)

# =============================================================================
# PROJECT INFO
# =============================================================================
# These are typically not changed unless you're customizing the application
PROJECT_NAME="Bella's Reef"
VERSION="1.0.0"
API_V1_STR="/api/v1"

# =============================================================================
# ENVIRONMENT & DEBUG
# =============================================================================
# Set to: development, testing, or production
# WARNING: DEBUG=true in production is a security risk
ENV=development
DEBUG=true
LOG_LEVEL=INFO

# =============================================================================
# SECURITY (CRITICAL - CHANGE IN PRODUCTION)
# =============================================================================
# Generate a secure secret key:
# python -c "import secrets; print(secrets.token_urlsafe(32))"
# 
# SECURITY REQUIREMENTS:
# - Must be at least 32 characters long
# - Must be random and unique
# - Never use default values in production
# - Store securely and rotate regularly
SECRET_KEY=your-super-secret-key-change-this-in-production-minimum-32-chars

# JWT token expiration time in minutes (default: 7 days)
# Consider shorter expiration for higher security
ACCESS_TOKEN_EXPIRE_MINUTES=10080

# =============================================================================
# DATABASE CONFIGURATION (REQUIRED)
# =============================================================================
# PostgreSQL connection settings
# SECURITY: Use strong passwords and restrict database access
POSTGRES_SERVER=localhost
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=bellasreef
POSTGRES_PORT=5432

# =============================================================================
# ADMIN USER (CRITICAL - CHANGE IN PRODUCTION)
# =============================================================================
# Default admin user created during database initialization
# 
# SECURITY REQUIREMENTS:
# - Use strong, unique passwords (minimum 8 characters)
# - Avoid common passwords: admin, password, 123456, etc.
# - Use real email addresses for password recovery
# - Change these values immediately after first deployment
ADMIN_USERNAME=admin
ADMIN_PASSWORD=reefrocks
ADMIN_EMAIL=admin@example.com
ADMIN_PHONE=+15555555555

# =============================================================================
# HARDWARE PWM CONFIGURATION (EXPLICIT - NO AUTO-DETECTION)
# =============================================================================
# PWM (Pulse Width Modulation) settings for controlling lights, pumps, etc.
# 
# IMPORTANT: All hardware configuration must be explicit - no auto-detection
# 
# VALIDATION RULES:
# - PWM_FREQUENCY: 1Hz to 1MHz (typical: 1000Hz)
# - PWM_CHANNELS: 1 to 64 (typical: 16)
# - SENSOR_POLL_INTERVAL: 1 to 3600 seconds
PWM_FREQUENCY=1000
PWM_CHANNELS=16
SENSOR_POLL_INTERVAL=60

# =============================================================================
# RASPBERRY PI PLATFORM SELECTION (REQUIRED - NO AUTO-DETECTION)
# =============================================================================
# RPI_PLATFORM: Must be explicitly set to one of the following values:
# - "legacy": Raspberry Pi 4 and earlier (RPi.GPIO hardware PWM)
# - "rpi5": Raspberry Pi 5 (RP1 hardware PWM)
# - "none": Disable Pi host PWM (for development/testing or external controllers)
#
# IMPORTANT: No auto-detection - must be explicitly configured
RPI_PLATFORM=none

# =============================================================================
# GPIO PWM CONFIGURATION (REQUIRED FOR PI PLATFORMS)
# =============================================================================
# PWM_GPIO_PINS: Comma-separated list of BCM GPIO numbers (not board pin numbers)
# 
# WARNING: ALWAYS USE BCM GPIO NUMBERS, NEVER BOARD PIN NUMBERS!
# Examples:
# - BCM GPIO 18 = Board Pin 12
# - BCM GPIO 19 = Board Pin 35
# - BCM GPIO 12 = Board Pin 32
# - BCM GPIO 13 = Board Pin 33
# See https://pinout.xyz/ for complete Raspberry Pi GPIO pinout reference
#
# VALIDATION RULES:
# - Required when RPI_PLATFORM=legacy or rpi5
# - Must be blank/empty when RPI_PLATFORM=none (will be ignored with warning)
# - Format: "18,19" (comma-separated, no spaces)
# - BCM GPIO range: 1-40 (not physical board pin numbers)
#
# HARDWARE PWM PIN LIMITATIONS:
# - Legacy Pi (RPI_PLATFORM=legacy): Only pins 12, 13, 18, 19 support hardware PWM
# - Pi 5 (RPI_PLATFORM=rpi5): All GPIOs support hardware PWM via RP1
#
# PIN REFERENCE:
# - BCM GPIO numbers: https://pinout.xyz/
# - Legacy Pi PWM pins: https://pinout.xyz/pinout/pwm
# - Pi 5 PWM: All GPIO pins via RP1
#
# Examples:
# - Legacy Pi: PWM_GPIO_PINS=18,19
# - Pi 5: PWM_GPIO_PINS=18,19,20,21
# - Development/None: PWM_GPIO_PINS= (empty)
PWM_GPIO_PINS=

# =============================================================================
# EXTERNAL PCA9685 I2C PWM CONTROLLER (OPTIONAL)
# =============================================================================
# PCA9685_ENABLED: Enable/disable external I2C PWM controller
# 
# VALIDATION RULES:
# - Must be "true" or "false" (boolean)
# - When true, PCA9685_ADDRESS and PCA9685_FREQUENCY are required
# - Can be used with or without Pi host PWM
#
# PCA9685_ADDRESS: I2C address in hexadecimal format
# - Valid range: 0x40 to 0x7F (64 to 127 decimal)
# - Common addresses: 0x40, 0x41, 0x42, 0x43
# - Format: "0x40" (hexadecimal with 0x prefix)
#
# PCA9685_FREQUENCY: PWM frequency in Hz
# - Valid range: 1Hz to 1MHz (typical: 1000Hz)
# - Must be integer value
#
# Examples:
# - Disabled: PCA9685_ENABLED=false
# - Enabled: PCA9685_ENABLED=true, PCA9685_ADDRESS=0x40, PCA9685_FREQUENCY=1000
PCA9685_ENABLED=false
PCA9685_ADDRESS=0x40
PCA9685_FREQUENCY=1000

# =============================================================================
# CONFIGURATION EXAMPLES FOR DIFFERENT SETUPS
# =============================================================================
# 
# 1. LEGACY PI (Pi 4 and earlier) - Hardware PWM on limited pins:
#    RPI_PLATFORM=legacy
#    PWM_GPIO_PINS=18,19  # Only pins 12, 13, 18, 19 support hardware PWM
#    PCA9685_ENABLED=false
#
# 2. PI 5 - Hardware PWM on all GPIO pins:
#    RPI_PLATFORM=rpi5
#    PWM_GPIO_PINS=18,19,20,21  # All GPIOs support hardware PWM via RP1
#    PCA9685_ENABLED=false
#
# 3. DEVELOPMENT/TESTING - No hardware PWM:
#    RPI_PLATFORM=none
#    PWM_GPIO_PINS=  # Must be blank when RPI_PLATFORM=none (will be ignored with warning)
#    PCA9685_ENABLED=false
#
# 4. EXTERNAL PCA9685 ONLY - No Pi host PWM:
#    RPI_PLATFORM=none
#    PWM_GPIO_PINS=  # Must be blank when RPI_PLATFORM=none
#    PCA9685_ENABLED=true
#    PCA9685_ADDRESS=0x40
#    PCA9685_FREQUENCY=1000
#
# 5. HYBRID SETUP - Pi host PWM + External PCA9685:
#    RPI_PLATFORM=rpi5
#    PWM_GPIO_PINS=18,19  # Both host PWM and PCA9685 will be available
#    PCA9685_ENABLED=true
#    PCA9685_ADDRESS=0x40
#    PCA9685_FREQUENCY=1000

# =============================================================================
# CORS (Cross-Origin Resource Sharing)
# =============================================================================
# Must be a valid JSON array of strings
# 
# SECURITY WARNINGS:
# - ["*"] allows ALL origins (insecure for production)
# - Empty string "" converts to ["*"] (insecure)
# - Use specific domains in production
# 
# VALIDATION:
# - Origins should start with http:// or https://
# - JSON format: ["http://localhost", "https://example.com"]
# - Comma-separated fallback: http://localhost,https://example.com
# 
# Examples:
# - Development: ["http://localhost", "http://localhost:3000"]
# - Production: ["https://yourdomain.com", "https://www.yourdomain.com"]
# - Allow all origins: ["*"] (DEVELOPMENT ONLY)
# - Empty string: "" (converts to ["*"] - DEVELOPMENT ONLY)
CORS_ORIGINS=["*"]

# =============================================================================
# EMAIL CONFIGURATION (Optional - Future Alerting)
# =============================================================================
# SMTP settings for email notifications (not yet implemented)
# 
# SECURITY: Use encrypted connections (SMTP_TLS=true) and strong passwords
SMTP_TLS=true
SMTP_PORT=587
SMTP_HOST=
SMTP_USER=
SMTP_PASSWORD=
EMAILS_FROM_EMAIL=
EMAILS_FROM_NAME=

# =============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# =============================================================================
# Before deploying to production, ensure you have:
#
# 🔒 SECURITY:
# ✅ Generated a strong SECRET_KEY (32+ characters, random)
# ✅ Changed ADMIN_USERNAME and ADMIN_PASSWORD to strong values
# ✅ Updated ADMIN_EMAIL to a real email address
# ✅ Set ENV=production
# ✅ Set DEBUG=false
# ✅ Updated CORS_ORIGINS with specific frontend domain(s) (not ["*"])
# ✅ Used strong database passwords
# ✅ Set LOG_LEVEL=WARNING or ERROR
# ✅ Configured proper database credentials and access
#
# 🔧 HARDWARE CONFIGURATION:
# ✅ Set RPI_PLATFORM explicitly (legacy, rpi5, or none)
# ✅ Configured PWM_GPIO_PINS for Pi platforms (BCM pin numbers)
# ✅ Validated GPIO pins for your specific platform
# ✅ Set PCA9685_ENABLED=true if using external I2C PWM
# ✅ Configured PCA9685_ADDRESS and PCA9685_FREQUENCY if enabled
# ✅ Set appropriate PWM frequency and channels
# ✅ Configured sensor polling intervals
#
# 🚀 DEPLOYMENT:
# ✅ Database is initialized and accessible
# ✅ All environment variables are properly set
# ✅ Application starts without errors
# ✅ Admin user can log in successfully
# ✅ Hardware connections are tested
# ✅ PWM configuration is validated
#
# 📝 DOCUMENTATION:
# ✅ Configuration is documented for your team
# ✅ Backup and recovery procedures are in place
# ✅ Monitoring and alerting are configured

# =============================================================================
# Bella's Reef Scheduler Service Environment Configuration
# =============================================================================
# Copy this file to .env and update with your actual values

# =============================================================================
# SECURITY WARNING: Change these values in production!
# =============================================================================

# Service Authentication
SERVICE_TOKEN=changeme_secure_token_here
# This token is used for inter-service API authentication
# Generate a secure random token and share it across all services

# Database Configuration
DATABASE_URL=postgresql://username:password@localhost:5432/bellasreef
# PostgreSQL connection string

# Security Settings
SECRET_KEY=your_super_secret_key_here_change_this_in_production
# Used for JWT token signing - generate a secure random key
# Command to generate: openssl rand -hex 32

# CORS Settings
ALLOWED_HOSTS=["http://localhost:3000", "http://localhost:8001"]
# List of allowed origins for CORS

# Service Configuration
SERVICE_PORT=8001
SERVICE_HOST=0.0.0.0

# Scheduler Settings
SCHEDULER_INTERVAL=60
# Interval in seconds for scheduler to check for jobs

# =============================================================================
# DEPLOYMENT CHECKLIST:
# 1. Change SECRET_KEY to a secure random value
# 2. Update DATABASE_URL with your PostgreSQL credentials
# 3. Set SERVICE_TOKEN to a secure value shared across services
# 4. Configure ALLOWED_HOSTS for your deployment environment
# 5. Ensure PostgreSQL is running and accessible
# ============================================================================= 