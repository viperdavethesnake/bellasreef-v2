# =============================================================================
# Bella's Reef - Environment Configuration
# =============================================================================
# Copy this file to .env and update values for your environment
# cp env.example .env
#
# SECURITY NOTE: This file contains sensitive configuration.
# - Never commit .env to version control
# - Use strong, unique passwords in production
# - Review all settings before deployment

# =============================================================================
# PROJECT INFO
# =============================================================================
# These are typically not changed unless you're customizing the application
PROJECT_NAME="Bella's Reef"
VERSION="1.0.0"
API_V1_STR="/api/v1"

# =============================================================================
# ENVIRONMENT & DEBUG
# =============================================================================
# Set to: development, testing, or production
# WARNING: DEBUG=true in production is a security risk
ENV=development
DEBUG=true
LOG_LEVEL=INFO

# =============================================================================
# SECURITY (CRITICAL - CHANGE IN PRODUCTION)
# =============================================================================
# Generate a secure secret key:
# python -c "import secrets; print(secrets.token_urlsafe(32))"
# 
# SECURITY REQUIREMENTS:
# - Must be at least 32 characters long
# - Must be random and unique
# - Never use default values in production
# - Store securely and rotate regularly
SECRET_KEY=your-super-secret-key-change-this-in-production-minimum-32-chars

# JWT token expiration time in minutes (default: 7 days)
# Consider shorter expiration for higher security
ACCESS_TOKEN_EXPIRE_MINUTES=10080

# =============================================================================
# DATABASE CONFIGURATION (REQUIRED)
# =============================================================================
# PostgreSQL connection settings
# SECURITY: Use strong passwords and restrict database access
POSTGRES_SERVER=localhost
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your-database-password
POSTGRES_DB=bellasreef
POSTGRES_PORT=5432

# =============================================================================
# ADMIN USER (CRITICAL - CHANGE IN PRODUCTION)
# =============================================================================
# Default admin user created during database initialization
# 
# SECURITY REQUIREMENTS:
# - Use strong, unique passwords (minimum 8 characters)
# - Avoid common passwords: admin, password, 123456, etc.
# - Use real email addresses for password recovery
# - Change these values immediately after first deployment
ADMIN_USERNAME=admin
ADMIN_PASSWORD=reefrocks
ADMIN_EMAIL=admin@example.com
ADMIN_PHONE=+15555555555

# =============================================================================
# HARDWARE CONFIGURATION
# =============================================================================
# PWM (Pulse Width Modulation) settings for controlling lights, pumps, etc.
# 
# VALIDATION:
# - PWM_FREQUENCY: 1Hz to 1MHz (typical: 1000Hz)
# - PWM_CHANNELS: 1 to 64 (typical: 16)
# - SENSOR_POLL_INTERVAL: 1 to 3600 seconds
PWM_FREQUENCY=1000
PWM_CHANNELS=16
SENSOR_POLL_INTERVAL=60

# Raspberry Pi Platform Selection
# Options: auto, legacy, rpi5, none
# - auto: Automatically detect Pi model (recommended)
# - legacy: Force RPi.GPIO (Pi 4 and earlier)
# - rpi5: Force Pi 5 RP1 GPIO
# - none: Disable RPi PWM (for development/testing)
RPI_PLATFORM=auto

# PCA9685 I2C PWM Controller (Optional)
# 
# VALIDATION:
# - Address must be between 0x40-0x7F (64-127)
# - Common addresses: 0x40, 0x41, 0x42, 0x43
# - Frequency: 1Hz to 1MHz (typical: 1000Hz)
PCA9685_ADDRESS=0x40
PCA9685_FREQUENCY=1000

# =============================================================================
# CORS (Cross-Origin Resource Sharing)
# =============================================================================
# Must be a valid JSON array of strings
# 
# SECURITY WARNINGS:
# - ["*"] allows ALL origins (insecure for production)
# - Empty string "" converts to ["*"] (insecure)
# - Use specific domains in production
# 
# VALIDATION:
# - Origins should start with http:// or https://
# - JSON format: ["http://localhost", "https://example.com"]
# - Comma-separated fallback: http://localhost,https://example.com
# 
# Examples:
# - Development: ["http://localhost", "http://localhost:3000"]
# - Production: ["https://yourdomain.com", "https://www.yourdomain.com"]
# - Allow all origins: ["*"] (DEVELOPMENT ONLY)
# - Empty string: "" (converts to ["*"] - DEVELOPMENT ONLY)
CORS_ORIGINS=["*"]

# =============================================================================
# EMAIL CONFIGURATION (Optional - Future Alerting)
# =============================================================================
# SMTP settings for email notifications (not yet implemented)
# 
# SECURITY: Use encrypted connections (SMTP_TLS=true) and strong passwords
SMTP_TLS=true
SMTP_PORT=587
SMTP_HOST=
SMTP_USER=
SMTP_PASSWORD=
EMAILS_FROM_EMAIL=
EMAILS_FROM_NAME=

# =============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# =============================================================================
# Before deploying to production, ensure you have:
#
# üîí SECURITY:
# ‚úÖ Generated a strong SECRET_KEY (32+ characters, random)
# ‚úÖ Changed ADMIN_USERNAME and ADMIN_PASSWORD to strong values
# ‚úÖ Updated ADMIN_EMAIL to a real email address
# ‚úÖ Set ENV=production
# ‚úÖ Set DEBUG=false
# ‚úÖ Updated CORS_ORIGINS with specific frontend domain(s) (not ["*"])
# ‚úÖ Used strong database passwords
# ‚úÖ Set LOG_LEVEL=WARNING or ERROR
# ‚úÖ Configured proper database credentials and access
#
# üîß CONFIGURATION:
# ‚úÖ Configured hardware settings for your specific setup
# ‚úÖ Set appropriate PWM frequency and channels
# ‚úÖ Configured PCA9685 address if using I2C PWM
# ‚úÖ Set correct RPI_PLATFORM for your hardware
# ‚úÖ Configured sensor polling intervals
#
# üöÄ DEPLOYMENT:
# ‚úÖ Database is initialized and accessible
# ‚úÖ All environment variables are properly set
# ‚úÖ Application starts without errors
# ‚úÖ Admin user can log in successfully
# ‚úÖ Hardware connections are tested
#
# üìù DOCUMENTATION:
# ‚úÖ Configuration is documented for your team
# ‚úÖ Backup and recovery procedures are in place
# ‚úÖ Monitoring and alerting are configured 